from database.requests_redis import redis_connect
from settings import tg_bot
import threading
import schedule
import telebot
import time
import os


def bot_notification_tg() -> None:
    login_developer = tg_bot['data']['login']
    password_developer = tg_bot['data']['password']
    token_bot = tg_bot['data']['token']
    send_times = tg_bot['send_times']

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = telebot.TeleBot(token_bot)
    print('TG bot is working...')

    @bot.message_handler(commands=['start'])
    def send_welcome(message) -> None:
        unique_id_user = message.chat.id
        bot.send_message(unique_id_user, f'–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                                         f'/authorization  - —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n'
                                         f'/times {" "*15}- —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ª–æ–≥–∏')

    @bot.message_handler(commands=['authorization'])
    def request(message) -> None:
        user_id = message.chat.id
        authorization_status = str(user_id) in redis_connect().lrange('tg_bot_users_id', 0, -1)
        if authorization_status:
            bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω üôÉ')
        else:
            bot.reply_to(message, '–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω: ')
            bot.register_next_step_handler(message, login)

    @bot.message_handler(commands=['times'])
    def request(message) -> None:
        user_id = message.chat.id
        authorization_status = str(user_id) in redis_connect().lrange('tg_bot_users_id', 0, -1)

        if authorization_status:
            times_logs = "\n".join(f'---{times}---' for times in send_times)
            message_chat = (f'–õ–æ–≥–∏ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ.\n\n'
                            f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏—Ö–æ–¥—è—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ –ú–°–ö –≤ '
                            f'—Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è üïò:\n{times_logs}\n'
                            f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n'
                            f'{" "*5}‚û°Ô∏è –º–æ–¥—É–ª—å settings ‚û°Ô∏è —Å–ª–æ–≤–∞—Ä—å tg_bot ‚û°Ô∏è –∫–ª—é—á send_times')
        else:
            message_chat = '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ id —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'

        bot.send_message(user_id, message_chat)

    def login(message) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–æ–≥–∏–Ω–∞ –≤ —á–∞—Ç –∫ –±–æ—Ç—É"""
        if login_developer == message.text:
            bot.reply_to(message, '–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å: ')
            bot.register_next_step_handler(message, password)
        else:
            bot.reply_to(message, '–¢–∞–∫–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç, '
                                  '–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /authorization')

    def password(message) -> None:
        """–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç –∫ –±–æ—Ç—É"""
        if password_developer == message.text:
            if str(message.chat.id) in redis_connect().lrange('tg_bot_users_id', 0, -1):
                bot.reply_to(message, f'–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚úÖ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ'
                                      f'–≤ {", ".join(send_times)} –ø–æ –ú–°–ö.')

            else:
                bot.reply_to(message, f'–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –Ø –ø—Ä–∏—Å—ã–ª–∞—é —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ '
                                      f'{", ".join(send_times)} –ø–æ –ú–°–ö. –ê –ª–æ–≥–∏ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Å–ª–∞–Ω—ã'
                                      f'—Å—Ä–∞–∑—É –∂–µ.'
                                      f'–¢—ã –ø–æ–ª—É—á–∏—à—å —Ñ–∞–π–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ.')
                redis_connect().lpush(f'tg_bot_users_id', message.chat.id)
        else:
            bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏, –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /continue')

    def send_file(path: str, message: str) -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ —á–∞—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        res_to_logs = os.path.join('logs', path)
        res_path = os.path.abspath(res_to_logs)
        if os.path.exists(res_path):
            status_send = True
            users_tg_id = redis_connect().lrange('tg_bot_users_id', 0, -1)

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π ---
            with open(res_path, encoding='utf-8') as f:
                if not f.read():
                    status_send = False

            # --- –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ ---
            if status_send and users_tg_id:
                for user in users_tg_id:
                    user = int(user)
                    bot.send_message(chat_id=user, text=message)
                    with open(res_path, encoding='utf-8') as f:
                        bot.send_document(chat_id=user, document=f)

                # --- –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ ---
                with open(res_path, 'w', encoding='utf-8') as f:
                    f.truncate()

    def schedule_job_basic_log() -> None:
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

        test_critical_error = '–í –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n–§–∞–π–ª —Å –Ω–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∏–∂–µ'
        test_base_message = '–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã'
        text_starts_program = '–°—Ç–∞—Ä—Ç –≤–∫ –±–æ—Ç–∞'
        [schedule.every().day.at(times).do(job_func=send_file,
                                           path='logs_base.log',
                                           message=test_base_message) for times in send_times]

        while True:
            schedule.run_pending()
            send_file(path='logs_error.log', message=test_critical_error)
            send_file(path='starts_program.log', message=text_starts_program)
            time.sleep(60)

    # –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å –±–æ—Ç–æ–º
    schedule_job_thread = threading.Thread(target=schedule_job_basic_log)
    schedule_job_thread.start()

    try:
        bot.infinity_polling(skip_pending=True)
    except telebot.apihelper.ApiTelegramException as e:
        print(e)
